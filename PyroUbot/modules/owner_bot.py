from datetime import datetime, timedelta

from dateutil.relativedelta import relativedelta
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pytz import timezone
from PyroUbot.config import OWNER_ID
from PyroUbot import *



@PY.UBOT("rasacoklat")
async def _(client, message):
    prs = await EMO.PROSES(client)
    ggl = await EMO.GAGAL(client)
    ktrng = await EMO.BL_KETERANGAN(client)
    brhsl = await EMO.BERHASIL(client)
    user = message.from_user
    seller_id = await get_list_from_vars(bot.me.id, "SELER_USERS")
    if user.id not in seller_id:
        return
    user_id, get_bulan = await extract_user_and_reason(message)
    msg = await message.reply(f"{prs}<b>·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    if not user_id:
        return await msg.edit(f"{ggl}<b><code>{message.text}</code> ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>")

    try:
        user = await client.get_users(user_id)
    except Exception as error:
        return await msg.edit(error)
    if not get_bulan:
        get_bulan = 1

    prem_users = await get_list_from_vars(bot.me.id, "PREM_USERS")

    if user.id in prem_users:
        return await msg.edit(f"""
 <blockquote><b>{ktrng} INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
 <b>…™·¥Ö:</b> {user.id}
 <b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥:</b> <i>sudah premium{brhsl}</i>
 <b>·¥áx·¥ò…™ Ä·¥á·¥Ö: <code>{get_bulan}</code>  ô·¥ú ü·¥Ä…¥</b></blockquote>
"""
        )

    try:
        now = datetime.now(timezone("Asia/Jakarta"))
        expired = now + relativedelta(months=int(get_bulan))
        await set_expired_date(user_id, expired)
        await add_to_vars(bot.me.id, "PREM_USERS", user.id)
        await msg.edit(f"""
 <blockquote><b>{ktrng} INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
 <b>…™·¥Ö:</b> {user.id}
 <b>·¥áx·¥ò…™ Ä·¥á·¥Ö: <code>{get_bulan}</code>  ô·¥ú ü·¥Ä…¥</b>
 <b> ô·¥ú·¥Ä·¥õ @{bot.me.username} </b></blockquote>
"""
        )
        return await bot.send_message(
            OWNER_ID,
            f"<b>üÜî id-seller: {message.from_user.id}\n\nüÜî id-customer: {user_id}</b>",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üî± seller",
                            callback_data=f"profil {message.from_user.id}",
                        ),
                        InlineKeyboardButton(
                            "customer ‚öúÔ∏è", callback_data=f"profil {user_id}"
                        ),
                    ],
                ]
            ),
        )
    except Exception as error:
        return await msg.edit(error)


@PY.UBOT("unprem")
async def _(client, message):
    msg = await message.reply("<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    user_id = await extract_user(message)
    if not user_id:
        return await msg.edit(
            f"<b><code>{message.text}</code> ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>"
        )

    try:
        user = await client.get_users(user_id)
    except Exception as error:
        return await msg.edit(error)

    prem_users = await get_list_from_vars(bot.me.id, "PREM_USERS")

    if user.id not in prem_users:
        return await msg.edit(f"""
 <blockquote><b>üí¨ INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
 <b>…™·¥Ö:</b> {user.id}
 <b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>TIDAK ADA DALAM DAFTAR</code></b></blockquote>
"""
        )
    try:
        await remove_from_vars(bot.me.id, "PREM_USERS", user.id)
        await rem_expired_date(user_id)
        return await msg.edit(f"""
 <blockquote><b>üí¨ INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
 <b>…™·¥Ö:</b> {user.id}
 <b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>UNPREMIUM</code></b></blockquote>
"""
        )
    except Exception as error:
        return await msg.edit(error)
        

@PY.UBOT("getprem")
async def _(client, message):
    user = message.from_user
    seller_id = await get_list_from_vars(bot.me.id, "SELER_USERS")
    if user.id not in seller_id:
        return
    prem = await get_list_from_vars(bot.me.id, "PREM_USERS")
    prem_users = []

    for user_id in prem:
        try:
            user = await client.get_users(user_id)
            prem_users.append(
                f"<b>üë§ [{user.first_name} {user.last_name or ''}](tg://user?id={user.id}) | <code>{user.id}</code></b>"
            )
        except Exception as error:
            return await message.reply(str(error))

    total_prem_users = len(prem_users)
    if prem_users:
        prem_list_text = "\n".join(prem_users)
        return await message.reply(
            f"<b>üìã daftar premium:\n\n{prem_list_text}\n\n‚öúÔ∏è total premium: {total_prem_users}</b>"
        )
    else:
        return await message.reply("<b>tidak ada pengguna premium saat ini</b>")


@PY.UBOT("addseles")
async def _(client, message):
    user = message.from_user
    if user.id != OWNER_ID:
        return
    msg = await message.reply("<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    user_id = await extract_user(message)
    if not user_id:
        return await msg.edit(
            f"<b>{message.text} ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>"
        )

    try:
        user = await client.get_users(user_id)
    except Exception as error:
        return await msg.edit(error)

    sudo_users = await get_list_from_vars(bot.me.id, "SELER_USERS")

    if user.id in sudo_users:
        return await msg.edit(f"""
<b>üí¨ INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
 <b>…™·¥Ö:</b> {user.id}
 <b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>SUDAH SELLER</code></b>
"""
        )

    try:
        await add_to_vars(bot.me.id, "SELER_USERS", user.id)
        return await msg.edit(f"""
<b>üí¨ INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
 <b>…™·¥Ö:</b> {user.id}
 <b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>SELLER</code></b>
"""
        )
    except Exception as error:
        return await msg.edit(error)


@PY.UBOT("unseles")
async def _(client, message):
    user = message.from_user
    if user.id != OWNER_ID:
        return
    msg = await message.reply("<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    user_id = await extract_user(message)
    if not user_id:
        return await msg.edit(
            f"<b>{message.text} ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>"
        )

    try:
        user = await client.get_users(user_id)
    except Exception as error:
        return await msg.edit(error)

    seles_users = await get_list_from_vars(bot.me.id, "SELER_USERS")

    if user.id not in seles_users:
        return await msg.edit(f"""
<b>üí¨ INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
 <b>…™·¥Ö:</b> {user.id}
 <b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>TIDAK DALAM DAFTAR SELLER</code></b>
"""
        )

    try:
        await remove_from_vars(bot.me.id, "SELER_USERS", user.id)
        return await msg.edit(f"""
<b>üí¨ INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
 <b>…™·¥Ö:</b> {user.id}
 <b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>UNSELLER</code></b>
"""
        )
    except Exception as error:
        return await msg.edit(error)


@PY.UBOT("getseles")
async def _(client, message):
    prs = await EMO.PROSES(client)
    ggl = await EMO.GAGAL(client)
    ktrng = await EMO.BL_KETERANGAN(client)
    brhsl = await EMO.BERHASIL(client)
    user = message.from_user
    if user.id != OWNER_ID:
        return
    Sh = await message.reply(f"{prs}<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    seles_users = await get_list_from_vars(bot.me.id, "SELER_USERS")

    if not seles_users:
        return await Sh.edit(f"{ggl}<b>·¥Ö·¥Ä“ì·¥õ·¥Ä Ä s·¥á ü ü·¥á Ä ·¥ã·¥ès·¥è…¥…¢</b>")

    seles_list = []
    for user_id in seles_users:
        try:
            user = await client.get_users(int(user_id))
            seles_list.append(
                f"<b>üë§ [{user.first_name} {user.last_name or ''}](tg://user?id={user.id}) | <code>{user.id}</code></b>"
            )
        except:
            continue

    if seles_list:
        response = (
            f"<b>{ktrng} ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä s·¥á ü ü·¥á Ä:</b>\n\n"
            + "\n".join(seles_list)
            + f"\n\n<b>{brhsl} ·¥õ·¥è·¥õ·¥Ä ü s·¥á ü ü·¥á Ä:</b> <code>{len(seles_list)}</code>"
        )
        return await Sh.edit(response)
    else:
        return await Sh.edit(f"{ggl}<b>·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á…¥…¢·¥Ä·¥ç ô…™ ü ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä s·¥á ü ü·¥á Ä</b>")


@PY.UBOT("set_time")
async def _(client, message):
    prs = await EMO.PROSES(client)
    ggl = await EMO.GAGAL(client)
    ktrng = await EMO.BL_KETERANGAN(client)
    user = message.from_user
    if user.id != OWNER_ID:
        return
    Tm = await message.reply(f"{prs}<b>·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ . . .</b>")
    bajingan = message.command
    if len(bajingan) != 3:
        return await Tm.edit(f"{ggl}<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ <code>/set_time</code> ·¥ús·¥á Ä_…™·¥Ö  ú·¥Ä Ä…™</b>")
    user_id = int(bajingan[1])
    get_day = int(bajingan[2])
    print(user_id , get_day)
    try:
        get_id = (await client.get_users(user_id)).id
        user = await client.get_users(user_id)
    except Exception as error:
        return await Tm.edit(error)
    if not get_day:
        get_day = 30
    now = datetime.now(timezone("Asia/Jakarta"))
    expire_date = now + timedelta(days=int(get_day))
    await set_expired_date(user_id, expire_date)
    await Tm.edit(f"""
 <blockquote><b>{ktrng} INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á: {user.mention}</b>
 <b>…™·¥Ö: {get_id}</b>
 <b>·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥_s·¥á ü·¥Ä·¥ç·¥Ä: {get_day}  ú·¥Ä Ä…™</b></blockquote>
"""
    )


@PY.UBOT("cek")
async def _(client, message):
    prs = await EMO.PROSES(client)
    ggl = await EMO.GAGAL(client)
    ktrng = await EMO.BL_KETERANGAN(client)
    brhsl = await EMO.BERHASIL(client)
    user = message.from_user
    if user.id != OWNER_ID:
        return
    Sh = await message.reply(f"{prs}<b>·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ . . .</b>")
    user_id = await extract_user(message)
    if not user_id:
        return await Sh.edit(f"{ggl}<b>·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥</b>")
    try:
        get_exp = await get_expired_date(user_id)
        sh = await client.get_users(user_id)
    except Exception as error:
        return await Sh.ediit(error)
    if get_exp is None:
        await Sh.edit(f"{ggl}{user_id} <b> ô·¥á ü·¥ú·¥ç ·¥Ö…™·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥.</b>")
    else:
        SH = await ubot.get_prefix(user_id)
        exp = get_exp.strftime("%d-%m-%Y")
        await Sh.edit(f"""
 <blockquote><b>{ktrng} INFORMATION</b>
 <b>…¥·¥Ä·¥ç·¥á: {sh.mention}</b>
 <b>…™·¥Ö: {user_id}</b>
 <b>·¥ò Ä·¥á“ì…™x: {' '.join(SH)}</b>
 <b>·¥Ä·¥ã·¥õ…™“ì_ ú…™…¥…¢…¢·¥Ä: {exp}</b></blockquote>
"""
        )


@PY.UBOT("addadmin")
async def _(client, message):
    user = message.from_user
    if user.id != OWNER_ID:
        return
    msg = await message.reply("<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    user_id = await extract_user(message)
    if not user_id:
        return await msg.edit(
            f"<b>{message.text} ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>"
        )

    try:
        user = await client.get_users(user_id)
    except Exception as error:
        return await msg.edit(error)

    admin_users = await get_list_from_vars(bot.me.id, "ADMIN_USERS")

    if user.id in admin_users:
        return await msg.edit(f"""
<b>üí¨ INFORMATION</b>
<b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
<b>…™·¥Ö:</b> {user.id}
<b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>SUDAH DALAM DAFTAR ADMIN</code></b>
"""
        )

    try:
        await add_to_vars(bot.me.id, "ADMIN_USERS", user.id)
        return await msg.edit(f"""
<b>üí¨ INFORMATION</b>
<b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
<b>…™·¥Ö:</b> {user.id}
<b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>ADMIN</code></b>
"""
        )
    except Exception as error:
        return await msg.edit(error)


@PY.UBOT("unadmin")
async def _(client, message):
    user = message.from_user
    if user.id != OWNER_ID:
        return
    msg = await message.reply("<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    user_id = await extract_user(message)
    if not user_id:
        return await msg.edit(
            f"<b>{message.text} ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>"
        )

    try:
        user = await client.get_users(user_id)
    except Exception as error:
        return await msg.edit(error)

    admin_users = await get_list_from_vars(bot.me.id, "ADMIN_USERS")

    if user.id not in admin_users:
        return await msg.edit(f"""
<b>üí¨ INFORMATION</b>
<b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
<b>…™·¥Ö:</b> {user.id}
<b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>TIDAK DALAM DAFTAR ADMIN</code></b>
"""
        )

    try:
        await remove_from_vars(bot.me.id, "ADMIN_USERS", user.id)
        return await msg.edit(f"""
<b>üí¨ INFORMATION</b>
<b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
<b>…™·¥Ö:</b> {user.id}
<b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥: <code>UNADMIN</code></b>
"""
        )
    except Exception as error:
        return await msg.edit(error)


@PY.UBOT("getadmin")
async def _(client, message):
    user = message.from_user
    if user.id != OWNER_ID:
        return
    Sh = await message.reply("<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    admin_users = await get_list_from_vars(bot.me.id, "ADMIN_USERS")

    if not admin_users:
        return await Sh.edit("<s>DAFTAR ADMIN KOSONG</s>")

    admin_list = []
    for user_id in admin_users:
        try:
            user = await client.get_users(int(user_id))
            admin_list.append(
                f"<b>üë§ [{user.first_name} {user.last_name or ''}](tg://user?id={user.id}) | <code>{user.id}</code></b>"
            )
        except:
            continue

    if admin_list:
        response = (
            "<b>üìã ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥Ä·¥Ö·¥ç…™…¥:</b>\n\n"
            + "\n".join(admin_list)
            + f"\n\n<b>‚öúÔ∏è ·¥õ·¥è·¥õ·¥Ä ü ·¥Ä·¥Ö·¥ç…™…¥:</b> <code>{len(admin_list)}</code>"
        )
        return await Sh.edit(response)
    else:
        return await Sh.edit("<b>TIDAK DAPAT MENGAMBIL DAFTAR ADMIN</b>")

@PY.UBOT("addultra")
async def _(client, message):
    prs = await EMO.PROSES(client)
    brhsl = await EMO.BERHASIL(client)
    ggl = await EMO.GAGAL(client)
    ktrng = await EMO.BL_KETERANGAN(client)
    user = message.from_user
    if user.id != OWNER_ID:
        return await message.reply_text(f"{ggl}·¥ç·¥Ä·¥ú …¥…¢·¥Ä·¥ò·¥Ä…™…¥ ·¥ã·¥Ä·¥ç·¥ú ?")
    msg = await message.reply(f"{prs}<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    user_id = await extract_user(message)
    if not user_id:
        return await msg.edit(
            f"{ggl}<code>{message.text}</code> <b>·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>"
        )

    try:
        user = await client.get_users(user_id)
    except Exception as error:
        return await msg.edit(error)

    ultra_users = await get_list_from_vars(bot.me.id, "ULTRA_PREM")

    if user.id in ultra_users:
        return await msg.edit(f"""
<blockquote><b>{ktrng}üí¨ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥</b>
<b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
<b>…™·¥Ö:</b> {user.id}
<b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥:</b> {ggl}<b>s·¥ú·¥Ö·¥Ä ú ·¥Ö·¥Ä ü·¥Ä·¥ç ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥ú ü·¥õ Ä·¥Ä·¥ò Ä·¥á·¥ç</b></blockquote>
"""
        )

    try:
        await add_to_vars(bot.me.id, "ULTRA_PREM", user.id)
        return await msg.edit(f"""
<blockquote><b>{ktrng}üí¨ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥</b>
<b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
<b>…™·¥Ö:</b> {user.id}
<b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥:</b> {brhsl}<b>·¥ú ü·¥õ Ä·¥Ä·¥ò Ä·¥á·¥ç</b></blockquote>
"""
        )
    except Exception as error:
        return await msg.edit(error)

@PY.UBOT("rmultra")
async def _(client, message):
    prs = await EMO.PROSES(client)
    ggl = await EMO.GAGAL(client)
    ktrng = await EMO.BL_KETERANGAN(client)
    brhsl = await EMO.BERHASIL(client)
    user = message.from_user
    if user.id != OWNER_ID:
        return await message.reply_text(f"{ggl}·¥ç·¥Ä·¥ú …¥…¢·¥Ä·¥ò·¥Ä…™…¥ ·¥ã·¥Ä·¥ç·¥ú ?")
    msg = await message.reply(f"{prs}<b>s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...</b>")
    user_id = await extract_user(message)
    if not user_id:
        return await msg.edit(
            f"{ggl}<b>{message.text} ·¥ús·¥á Ä_…™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á</b>"
        )

    try:
        user = await client.get_users(user_id)
    except Exception as error:
        return await msg.edit(error)

    ultra_users = await get_list_from_vars(bot.me.id, "ULTRA_PREM")

    if user.id not in ultra_users:
        return await msg.edit(f"""
<blockquote><b>{ktrng} …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥</b>
<b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
<b>…™·¥Ö:</b> {user.id}
<b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥:</b> {ggl}<b>·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥Ö·¥Ä ·¥Ö·¥Ä ü·¥Ä·¥ç ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥ú ü·¥õ Ä·¥Ä·¥ò Ä·¥á·¥ç</b></blockquote>
"""
        )

    try:
        await remove_from_vars(bot.me.id, "ULTRA_PREM", user.id)
        return await msg.edit(f"""
<blockquote><b>{ktrng} …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥</b>
<b>…¥·¥Ä·¥ç·¥á:</b> [{user.first_name} {user.last_name or ''}](tg://user?id={user.id})
<b>…™·¥Ö:</b> {user.id}
<b>·¥ã·¥á·¥õ·¥á Ä·¥Ä…¥…¢·¥Ä…¥:</b> {brhsl}<b> ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™  ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥ú ü·¥õ Ä·¥Ä·¥ò Ä·¥á·¥ç…™·¥ú·¥ç</b></blockquote>
"""
        )
    except Exception as error:
        return await msg.edit(error)
